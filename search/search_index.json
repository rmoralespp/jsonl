{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"jsonl About jsonl is a library that includes useful tools for working with jsonlines data as described jsonlines Features: \ud83c\udf0e Offers an API similar to Python's standard json module. \ud83d\ude80 Supports custom serialization/deserialization callbacks. By default, it uses the standard json module. \ud83d\udddc\ufe0f Enables compression using gzip , bzip2 , and xz formats. \ud83d\udd27 Load files containing broken lines, skipping any malformed lines. \ud83d\udce6 Provides a simple API for incremental writing to multiple files. Installation (via pip) pip install py-jsonl","title":"Introduction"},{"location":"#jsonl","text":"","title":"jsonl"},{"location":"#about","text":"jsonl is a library that includes useful tools for working with jsonlines data as described jsonlines Features: \ud83c\udf0e Offers an API similar to Python's standard json module. \ud83d\ude80 Supports custom serialization/deserialization callbacks. By default, it uses the standard json module. \ud83d\udddc\ufe0f Enables compression using gzip , bzip2 , and xz formats. \ud83d\udd27 Load files containing broken lines, skipping any malformed lines. \ud83d\udce6 Provides a simple API for incremental writing to multiple files.","title":"About"},{"location":"#installation-via-pip","text":"pip install py-jsonl","title":"Installation (via pip)"},{"location":"changes/","text":"Can see changes here","title":"Changes"},{"location":"dump/","text":"Dump an iterable to a JSON Lines file. Dump the data to an uncompressed file at the specified path. import jsonl data = [ {\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]]}, {\"name\": \"May\", \"wins\": []}, ] jsonl.dump(data, \"file.jsonl\") Dump the data to a compressed file at the specified path. The file can be compressed using gzip , bzip2 , or xz formats. If the file extension is not recognized, it will be dumped to a text file. import jsonl data = [ {\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]]}, {\"name\": \"May\", \"wins\": []}, ] # Dump to a gzip compressed file. jsonl.dump(data, \"file.jsonl.gz\") # Dump to a bzip2 compressed file. jsonl.dump(data, \"file.jsonl.bz2\") # Dump to a xz compressed file. jsonl.dump(data, \"file.jsonl.xz\") # Dump to a text file because the extension is not recognized. jsonl.dump(data, \"file.jsonl.foo\") Dump the data to the already opened compressed file. import gzip import jsonl data = [ {\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]]}, {\"name\": \"May\", \"wins\": []}, ] # Dump to an opened gzip file, text_mode is false because it is a binary file. with gzip.open(\"file.jsonl.gz\", mode=\"wb\") as fp: jsonl.dump(data, fp, text_mode=False) Append the data to the end of the existing compressed file. import gzip import jsonl data = [ {\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]]}, {\"name\": \"May\", \"wins\": []}, ] # Text mode is false because it is a binary file. with gzip.open(\"file.jsonl.gz\", mode=\"ab\") as fp: jsonl.dump(data, fp, text_mode=False) Dump the data to a custom file object. import jsonl class MyCustomFile1: def write(self, line): print(line) class MyCustomFile2: def writelines(self, lines): print(\"\".join(lines)) data = [ {\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]]}, {\"name\": \"May\", \"wins\": []}, ] # Dump the data to the custom file object using the write method. jsonl.dump(data, MyCustomFile1(), text_mode=True) # Dump the data to the custom file object using the writelines method. jsonl.dump(data, MyCustomFile2(), text_mode=True) Write the data using a custom serialization callback. You can install orjson and ujson to run the following example. pip install orjson ujson # Ignore this command if these libraries are already installed. import orjson import ujson import jsonl data = [ {\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]]}, {\"name\": \"May\", \"wins\": []}, ] # Dump the data using the ujson library. jsonl.dump(data, \"foo.jsonl\", json_dumps=ujson.dumps, ensure_ascii=False) # Dump the data using the orjson library. jsonl.dump(data, \"var.jsonl\", json_dumps=orjson.dumps)","title":"Dump to a jsonlines file"},{"location":"dump/#dump-an-iterable-to-a-json-lines-file","text":"Dump the data to an uncompressed file at the specified path. import jsonl data = [ {\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]]}, {\"name\": \"May\", \"wins\": []}, ] jsonl.dump(data, \"file.jsonl\") Dump the data to a compressed file at the specified path. The file can be compressed using gzip , bzip2 , or xz formats. If the file extension is not recognized, it will be dumped to a text file. import jsonl data = [ {\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]]}, {\"name\": \"May\", \"wins\": []}, ] # Dump to a gzip compressed file. jsonl.dump(data, \"file.jsonl.gz\") # Dump to a bzip2 compressed file. jsonl.dump(data, \"file.jsonl.bz2\") # Dump to a xz compressed file. jsonl.dump(data, \"file.jsonl.xz\") # Dump to a text file because the extension is not recognized. jsonl.dump(data, \"file.jsonl.foo\") Dump the data to the already opened compressed file. import gzip import jsonl data = [ {\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]]}, {\"name\": \"May\", \"wins\": []}, ] # Dump to an opened gzip file, text_mode is false because it is a binary file. with gzip.open(\"file.jsonl.gz\", mode=\"wb\") as fp: jsonl.dump(data, fp, text_mode=False) Append the data to the end of the existing compressed file. import gzip import jsonl data = [ {\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]]}, {\"name\": \"May\", \"wins\": []}, ] # Text mode is false because it is a binary file. with gzip.open(\"file.jsonl.gz\", mode=\"ab\") as fp: jsonl.dump(data, fp, text_mode=False) Dump the data to a custom file object. import jsonl class MyCustomFile1: def write(self, line): print(line) class MyCustomFile2: def writelines(self, lines): print(\"\".join(lines)) data = [ {\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]]}, {\"name\": \"May\", \"wins\": []}, ] # Dump the data to the custom file object using the write method. jsonl.dump(data, MyCustomFile1(), text_mode=True) # Dump the data to the custom file object using the writelines method. jsonl.dump(data, MyCustomFile2(), text_mode=True) Write the data using a custom serialization callback. You can install orjson and ujson to run the following example. pip install orjson ujson # Ignore this command if these libraries are already installed. import orjson import ujson import jsonl data = [ {\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]]}, {\"name\": \"May\", \"wins\": []}, ] # Dump the data using the ujson library. jsonl.dump(data, \"foo.jsonl\", json_dumps=ujson.dumps, ensure_ascii=False) # Dump the data using the orjson library. jsonl.dump(data, \"var.jsonl\", json_dumps=orjson.dumps)","title":"Dump an iterable to a JSON Lines file."},{"location":"dump_fork/","text":"Dump to multiple jsonlines files Dump multiple iterables to the specified jsonlines file paths, optimizing memory usage. The files can be compressed using gzip , bzip2 , or xz formats. If the file extension is not recognized, it will be dumped to a text file. You can install orjson and ujson to run the following example. pip install orjson ujson # Ignore this command if these libraries are already installed. import orjson import ujson import jsonl def worker(): yield (\"num.jsonl\", ({\"value\": 1}, {\"value\": 2})) yield (\"foo.jsonl\", iter(({\"a\": \"1\"}, {\"b\": 2}))) yield (\"num.jsonl\", [{\"value\": 3}]) yield (\"foo.jsonl\", ()) # Dump the data using the default json.dumps function. jsonl.dump_fork(worker()) # Dump the data using the ujson library. jsonl.dump_fork(worker(), json_dumps=ujson.dumps, ensure_ascii=False) # Dump the data using the orjson library. jsonl.dump_fork(worker(), json_dumps=orjson.dumps) # using (orjson)","title":"Dump to multiple jsonlines files"},{"location":"dump_fork/#dump-to-multiple-jsonlines-files","text":"Dump multiple iterables to the specified jsonlines file paths, optimizing memory usage. The files can be compressed using gzip , bzip2 , or xz formats. If the file extension is not recognized, it will be dumped to a text file. You can install orjson and ujson to run the following example. pip install orjson ujson # Ignore this command if these libraries are already installed. import orjson import ujson import jsonl def worker(): yield (\"num.jsonl\", ({\"value\": 1}, {\"value\": 2})) yield (\"foo.jsonl\", iter(({\"a\": \"1\"}, {\"b\": 2}))) yield (\"num.jsonl\", [{\"value\": 3}]) yield (\"foo.jsonl\", ()) # Dump the data using the default json.dumps function. jsonl.dump_fork(worker()) # Dump the data using the ujson library. jsonl.dump_fork(worker(), json_dumps=ujson.dumps, ensure_ascii=False) # Dump the data using the orjson library. jsonl.dump_fork(worker(), json_dumps=orjson.dumps) # using (orjson)","title":"Dump to multiple jsonlines files"},{"location":"dumps/","text":"Serialize an iterable into a JSON Lines formatted string. import jsonl data = ({'foo': 1}, {'bar': 2}) result = jsonl.dumps(data) print(result)","title":"Dump to a string"},{"location":"dumps/#serialize-an-iterable-into-a-json-lines-formatted-string","text":"import jsonl data = ({'foo': 1}, {'bar': 2}) result = jsonl.dumps(data) print(result)","title":"Serialize an iterable into a JSON Lines formatted string."},{"location":"installation/","text":"Installation Install jsonl via pip: pip install py-jsonl","title":"Installation"},{"location":"installation/#installation","text":"Install jsonl via pip: pip install py-jsonl","title":"Installation"},{"location":"load/","text":"Load JSON Lines files Load JSON Lines (jsonl) files in Python, covering both uncompressed and compressed files, handling broken lines, and using custom deserialization and opener callbacks. Support for loading files compressed in gzip , bzip2 , and xz formats. If a compression extension is not provided or is unrecognized, the file will be assumed to be uncompressed. Load an uncompressed file given a path import jsonl path = \"file.jsonl\" # Example data to save in the file data = [ {\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]]}, {\"name\": \"May\", \"wins\": []}, ] # Save the data to the jsonl file jsonl.dump(data, path) # Load the file as an iterable iterable = jsonl.load(path) print(tuple(iterable)) Load a compressed file given a path. The file can be compressed using gzip , bzip2 , or xz formats. import jsonl path = \"file.jsonl.gz\" # Example data to save in the file data = [ {\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]]}, {\"name\": \"May\", \"wins\": []}, ] # Save the data to the compressed jsonl file jsonl.dump(data, path) # Load the compressed file as an iterable iterable = jsonl.load(path) print(tuple(iterable)) Load a file from an open file object. This is useful when you need to load a file from a custom source. import gzip import jsonl path = \"file.jsonl.gz\" # Example data to save in the file data = [ {\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]]}, {\"name\": \"May\", \"wins\": []}, ] # Save the data to the compressed jsonl file jsonl.dump(data, path) # Load the file using an open file object with gzip.open(path, mode=\"rb\") as fp: iterable = jsonl.load(fp) print(tuple(iterable)) Load a file containing broken lines and skip any malformed lines. import jsonl # Create a file with broken JSON lines with open(\"file.jsonl\", mode=\"wt\", encoding=\"utf-8\") as fp: fp.write('{\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]}\\n') fp.write('{\"name\": \"May\", \"wins\": []\\n') # missing closing bracket fp.write('{\"name\": \"Richard\", \"wins\": []}\\n') # Load the jsonl file, skipping broken lines iterable = jsonl.load(\"file.jsonl\", broken=True) print(tuple(iterable)) Output: WARNING:root:Broken line at 1: Expecting ',' delimiter: line 1 column 69 (char 68) WARNING:root:Broken line at 2: Expecting ',' delimiter: line 2 column 1 (char 28) ({'name': 'Richard', 'wins': []},) Load a file using a custom deserialization callback. You can install orjson and ujson to run the following example. pip install orjson ujson # Ignore this command if these libraries are already installed. Now, you can use these libraries to load the JSON lines: import orjson import ujson import jsonl path = \"file.jsonl\" # Example data to save in the file data = [ {\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]]}, {\"name\": \"May\", \"wins\": []}, ] # Save the data to the jsonl file jsonl.dump(data, path) # Load the file using ujson iterable1 = jsonl.load(path, json_loads=ujson.loads) # Load the file using orjson iterable2 = jsonl.load(path, json_loads=orjson.loads) print(tuple(iterable1)) print(tuple(iterable2)) Load a file using a custom opener callback. The opener parameter allows loading files from custom sources, such as a ZIP archive. Here\u2019s how to use it: import zipfile import jsonl # Create a ZIP file containing a jsonlines file zip_path = \"data.zip\" jsonl_path = \"file.jsonl\" data = [ {\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]]}, {\"name\": \"May\", \"wins\": []}, ] # Save the data to the jsonl file jsonl.dump(data, jsonl_path) # Create a ZIP file and add the jsonl file to it with zipfile.ZipFile(zip_path, 'w') as zf: zf.write(jsonl_path) # Define a custom opener function to read from the ZIP file def opener(name, *args, **kwargs): return zipfile.ZipFile(name).open(jsonl_path) # Load the jsonl file from the ZIP archive using the opener iterable = jsonl.load(zip_path, opener=opener) print(tuple(iterable))","title":"Load jsonlines file"},{"location":"load/#load-json-lines-files","text":"Load JSON Lines (jsonl) files in Python, covering both uncompressed and compressed files, handling broken lines, and using custom deserialization and opener callbacks. Support for loading files compressed in gzip , bzip2 , and xz formats. If a compression extension is not provided or is unrecognized, the file will be assumed to be uncompressed. Load an uncompressed file given a path import jsonl path = \"file.jsonl\" # Example data to save in the file data = [ {\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]]}, {\"name\": \"May\", \"wins\": []}, ] # Save the data to the jsonl file jsonl.dump(data, path) # Load the file as an iterable iterable = jsonl.load(path) print(tuple(iterable)) Load a compressed file given a path. The file can be compressed using gzip , bzip2 , or xz formats. import jsonl path = \"file.jsonl.gz\" # Example data to save in the file data = [ {\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]]}, {\"name\": \"May\", \"wins\": []}, ] # Save the data to the compressed jsonl file jsonl.dump(data, path) # Load the compressed file as an iterable iterable = jsonl.load(path) print(tuple(iterable)) Load a file from an open file object. This is useful when you need to load a file from a custom source. import gzip import jsonl path = \"file.jsonl.gz\" # Example data to save in the file data = [ {\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]]}, {\"name\": \"May\", \"wins\": []}, ] # Save the data to the compressed jsonl file jsonl.dump(data, path) # Load the file using an open file object with gzip.open(path, mode=\"rb\") as fp: iterable = jsonl.load(fp) print(tuple(iterable)) Load a file containing broken lines and skip any malformed lines. import jsonl # Create a file with broken JSON lines with open(\"file.jsonl\", mode=\"wt\", encoding=\"utf-8\") as fp: fp.write('{\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]}\\n') fp.write('{\"name\": \"May\", \"wins\": []\\n') # missing closing bracket fp.write('{\"name\": \"Richard\", \"wins\": []}\\n') # Load the jsonl file, skipping broken lines iterable = jsonl.load(\"file.jsonl\", broken=True) print(tuple(iterable)) Output: WARNING:root:Broken line at 1: Expecting ',' delimiter: line 1 column 69 (char 68) WARNING:root:Broken line at 2: Expecting ',' delimiter: line 2 column 1 (char 28) ({'name': 'Richard', 'wins': []},) Load a file using a custom deserialization callback. You can install orjson and ujson to run the following example. pip install orjson ujson # Ignore this command if these libraries are already installed. Now, you can use these libraries to load the JSON lines: import orjson import ujson import jsonl path = \"file.jsonl\" # Example data to save in the file data = [ {\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]]}, {\"name\": \"May\", \"wins\": []}, ] # Save the data to the jsonl file jsonl.dump(data, path) # Load the file using ujson iterable1 = jsonl.load(path, json_loads=ujson.loads) # Load the file using orjson iterable2 = jsonl.load(path, json_loads=orjson.loads) print(tuple(iterable1)) print(tuple(iterable2)) Load a file using a custom opener callback. The opener parameter allows loading files from custom sources, such as a ZIP archive. Here\u2019s how to use it: import zipfile import jsonl # Create a ZIP file containing a jsonlines file zip_path = \"data.zip\" jsonl_path = \"file.jsonl\" data = [ {\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]]}, {\"name\": \"May\", \"wins\": []}, ] # Save the data to the jsonl file jsonl.dump(data, jsonl_path) # Create a ZIP file and add the jsonl file to it with zipfile.ZipFile(zip_path, 'w') as zf: zf.write(jsonl_path) # Define a custom opener function to read from the ZIP file def opener(name, *args, **kwargs): return zipfile.ZipFile(name).open(jsonl_path) # Load the jsonl file from the ZIP archive using the opener iterable = jsonl.load(zip_path, opener=opener) print(tuple(iterable))","title":"Load JSON Lines files"}]}