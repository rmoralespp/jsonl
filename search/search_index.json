{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"jsonl","text":"<p>Useful functions for working with jsonlines data as described: https://jsonlines.org/</p>"},{"location":"#features","title":"Features","text":"<ul> <li>\ud83c\udf0e Offers an API similar to Python's standard <code>json</code> module.</li> <li>\ud83d\ude80 Supports custom serialization/deserialization callbacks.</li> <li>\ud83d\udddc\ufe0f Enables compression using <code>gzip</code>, <code>bzip2</code>, and <code>xz</code> formats.</li> <li>\ud83d\udd27 Load files containing broken lines, skipping any malformed lines.</li> <li>\ud83d\udce6 Provides a simple API for incremental writing to multiple files.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Install jsonl via pip:</p> <pre><code>pip install py-jsonl\n</code></pre>"},{"location":"dump/","title":"Dump Data","text":""},{"location":"dump/#dump-an-iterable-to-a-json-lines-file-dump","title":"Dump an iterable to a JSON Lines file. (dump)","text":"<p>Examples:</p> <p>Write the data to an uncompressed file at the specified path.</p> <pre><code>import jsonl\n\ndata = [\n    {\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]]},\n    {\"name\": \"May\", \"wins\": []},\n]\n\njsonl.dump(data, \"file.jsonl\")\n</code></pre> <p>Write the data to a compressed file at the specified path.</p> <pre><code>import jsonl\n\ndata = [\n    {\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]]},\n    {\"name\": \"May\", \"wins\": []},\n]\n\njsonl.dump(data, \"file.jsonl.gz\")  # gzip compression\njsonl.dump(data, \"file.jsonl.bz2\")  # bzip2 compression\njsonl.dump(data, \"file.jsonl.xz\")  # xz compression\n</code></pre> <p>Write the data to the already opened compressed file.</p> <pre><code>import gzip\nimport jsonl\n\ndata = [\n    {\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]]},\n    {\"name\": \"May\", \"wins\": []},\n]\n\nwith gzip.open(\"file.jsonl.gz\", mode=\"wb\") as fp:\n    jsonl.dump(data, fp, text_mode=False)\n</code></pre> <p>Append the data to the end of the existing compressed file.</p> <pre><code>\nimport gzip\nimport jsonl\n\ndata = [\n    {\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]]},\n    {\"name\": \"May\", \"wins\": []},\n]\n\nwith gzip.open(\"file.jsonl.gz\", mode=\"ab\") as fp:\n    jsonl.dump(data, fp, text_mode=False)\n</code></pre> <p>Write the data to a custom file object.</p> <pre><code>\nimport jsonl\n\n\nclass MyCustomFile1:\n\n    def write(self, line):\n        print(line)\n\n\nclass MyCustomFile2:\n\n    def writelines(self, lines):\n        print(\"\".join(lines))\n\n\ndata = [\n    {\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]]},\n    {\"name\": \"May\", \"wins\": []},\n]\n\njsonl.dump(data, MyCustomFile1(), text_mode=True)\njsonl.dump(data, MyCustomFile2(), text_mode=True)\n</code></pre> <p>Write the data using a custom serialization callback.</p> <p><code>pip install orjson ujson</code>  # Ignore this command if these libraries are already installed.</p> <pre><code>\nimport orjson\nimport ujson\n\nimport jsonl\n\ndata = [\n    {\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]]},\n    {\"name\": \"May\", \"wins\": []},\n]\n\njsonl.dump(data, \"foo.jsonl\", json_dumps=ujson.dumps, ensure_ascii=False) # using (ujson)\njsonl.dump(data, \"var.jsonl\", json_dumps=orjson.dumps) # using (orjson)\n</code></pre>"},{"location":"dump_fork/","title":"Dump Fork Data","text":""},{"location":"dump_fork/#dump-fork-incremental-dump","title":"Dump fork (Incremental dump)","text":"<p>Incrementally dumps multiple iterables into the specified jsonlines file paths, effectively reducing memory consumption.</p> <p>Examples:</p> <p><code>pip install orjson ujson</code>  # Ignore this command if these libraries are already installed.</p> <pre><code>import orjson\nimport ujson\nimport jsonl\n\n\ndef worker():\n    yield (\"num.jsonl\", ({\"value\": 1}, {\"value\": 2}))\n    yield (\"foo.jsonl\", iter(({\"a\": \"1\"}, {\"b\": 2})))\n    yield (\"num.jsonl\", [{\"value\": 3}])\n    yield (\"foo.jsonl\", ())\n\n\njsonl.dump_fork(worker())  # using (json)\njsonl.dump_fork(worker(), json_dumps=ujson.dumps, ensure_ascii=False)  # using (ujson)\njsonl.dump_fork(worker(), json_dumps=orjson.dumps)  # using (orjson)\n</code></pre>"},{"location":"dumps/","title":"Dump Text","text":""},{"location":"dumps/#serialize-an-iterable-into-a-json-lines-formatted-string-dumps","title":"Serialize an iterable into a JSON Lines formatted string. (dumps)","text":"<p>Examples:</p> <pre><code>import jsonl\n\ndata = ({'foo': 1}, {'bar': 2})\nresult = jsonl.dumps(data)\nprint(result)\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<p>Install jsonl via pip:</p> <pre><code>pip install py-jsonl\n</code></pre>"},{"location":"load/","title":"Load Data","text":""},{"location":"load/#load","title":"load","text":"<p>Deserialize a UTF-8 encoded jsonlines file into an iterable of Python objects.</p> <p>Examples:</p> <p>Load an uncompressed file from the specified path.</p> <pre><code>import jsonl\n\npath = \"file.jsonl\"\ndata = [\n    {\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]]},\n    {\"name\": \"May\", \"wins\": []},\n]\n\njsonl.dump(data, path)\niterable = jsonl.load(path)\nprint(tuple(iterable))\n</code></pre> <p>Load a compressed file from the specified path.</p> <pre><code>import jsonl\n\npath = \"file.jsonl.gz\"\ndata = [\n    {\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]]},\n    {\"name\": \"May\", \"wins\": []},\n]\n\njsonl.dump(data, path)\niterable = jsonl.load(path)\nprint(tuple(iterable))\n</code></pre> <p>Load a compressed file from the specified open file object.</p> <pre><code>import gzip\nimport jsonl\n\npath = \"file.jsonl.gz\"\ndata = [\n    {\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]]},\n    {\"name\": \"May\", \"wins\": []},\n]\n\njsonl.dump(data, path)\nwith gzip.open(path, mode=\"rb\") as fp:\n    iterable = jsonl.load(fp)\n    print(tuple(iterable))\n</code></pre> <p>Load a file containing broken lines, skipping any malformed lines.</p> <pre><code>import jsonl\n\nwith open(\"file.jsonl\", mode=\"wt\", encoding=\"utf-8\") as fp:\n    fp.write('{\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]}\\n')\n    fp.write('{\"name\": \"May\", \"wins\": []\\n')  # missing closing bracket\n    fp.write('{\"name\": \"Richard\", \"wins\": []}\\n')\n\niterable = jsonl.load(\"file.jsonl\", broken=True)\nprint(tuple(iterable))\n</code></pre> <p>Load a file using a custom deserialization callback.</p> <p><code>pip install orjson ujson</code>  # Ignore this command if these libraries are already installed.</p> <pre><code>import orjson\nimport ujson\nimport jsonl\n\npath = \"file.jsonl\"\ndata = [\n    {\"name\": \"Gilbert\", \"wins\": [[\"straight\", \"7\u2663\"], [\"one pair\", \"10\u2665\"]]},\n    {\"name\": \"May\", \"wins\": []},\n]\n\njsonl.dump(data, path)\n\niterable1 = jsonl.load(path, json_loads=ujson.loads)  # using (ujson)\niterable2 = jsonl.load(path, json_loads=orjson.loads)  # using (orjson)\nprint(tuple(iterable1))\nprint(tuple(iterable2))\n</code></pre>"}]}